#
# Default output
#

#defaults.pcm.rate_converter "speexrate"

# Medium occupancy and Medium quality(Tips: frequency response of 20kHz is - 2.7db)
# defaults.pcm.rate_converter "speexrate_medium"
# High occupancy and high quality(Under the condition of high temperature frequency reduction, the error of break pipe is easy to appear)
#defaults.pcm.rate_converter "speexrate_best"

pcm.!default {
	@args [ CARD ]
	@args.CARD {
		type string
		default {
			@func getenv
			vars [
				ALSA_PCM_CARD
				ALSA_CARD
			]
			default {
				@func refer
				name defaults.pcm.card
			}
		}
	}
	@args.DEV {
		type integer
		default {
			@func igetenv
			vars [
				ALSA_PCM_DEVICE
			]
			default {
				@func refer
				name defaults.pcm.device
			}
		}
	}
	@args.SUBDEV {
		type integer
		default {
			@func refer
			name defaults.pcm.subdevice
		}
	}
	type plug
    slave.pcm "softvol"
	type hw
	card $CARD
	device $DEV
	subdevice $SUBDEV
	hint {
		show {
			@func refer
			name defaults.namehint.extended
		}
		description "Direct hardware device without any conversions"
	}
}

pcm.!dmix {
	@args [ CARD DEV SUBDEV FORMAT RATE ]
	@args.CARD {
		type string
		default {
			@func refer
			name defaults.pcm.dmix.card
		}
	}
	@args.DEV {
		type integer
		default {
			@func refer
			name defaults.pcm.dmix.device
		}
	}
	@args.SUBDEV {
		type integer
		default 0
	}
	@args.FORMAT {
		type string
		default {
			@func refer
			name defaults.pcm.dmix.format
		}
	}
	@args.RATE {
		type integer
		default {
			@func refer
			name defaults.pcm.dmix.rate
		}
	}
	type dmix
	ipc_key {
		@func refer
		name defaults.pcm.ipc_key
	}
	ipc_gid {
		@func refer
		name defaults.pcm.ipc_gid
	}
	ipc_perm {
		@func refer
		name defaults.pcm.ipc_perm
	}
	slowptr 0   # sunxi add
	slave {
		pcm {
			type hw
			card $CARD
			device $DEV
			subdevice $SUBDEV
		}
		format $FORMAT
		rate $RATE
		period_size {
			@func refer
			name {
				@func concat
				strings [
					"defaults.dmix."
					{
						@func card_driver
						card $CARD
					}
					".period_size"
				]
			}
			default 1024
        }
		period_time {
			@func refer
			name {
				@func concat
				strings [
					"defaults.dmix."
					{
						@func card_driver
						card $CARD
					}
					".period_time"
				]
			}
			default -1
        }
		periods {
			@func refer
			name {
				@func concat
				strings [
					"defaults.dmix."
					{
						@func card_driver
						card $CARD
					}
					".periods"
				]
			}
			default 16
		}
	}
	hint {
		show {
			@func refer
			name defaults.namehint.extended
		}
		description "Direct sample mixing device"
		device_output $DEV
	}
}

pcm.softvol-system {
    @args [ CARD ]
    type softvol
    slave.pcm "dmix"
    control {
        name "PCM system volume"
        card $CARD
    }
}

pcm.softvol-music {
    @args [ CARD ]
    type softvol
    slave.pcm "dmix"
    control {
        name "PCM music volume"
        card $CARD
    }
}

pcm.softvol-navi {
    @args [ CARD ]
    type softvol
    slave.pcm "dmix"
    control {
        name "PCM navi volume"
        card $CARD
    }
}

pcm.softvol-btcall {
    @args [ CARD ]
    type softvol
    slave.pcm "dmix"
    control {
        name "PCM bt call volume"
        card $CARD
    }
}

pcm.softvol-btmusic {
    @args [ CARD ]
    type softvol
    slave.pcm "dmix"
    control {
        name "PCM bt music volume"
        card $CARD
    }
}

pcm.softvol-cvbs {
    @args [ CARD ]
    type softvol
    slave.pcm "dmix"
    control {
        name "PCM cvbs volume"
        card $CARD
    }
}

pcm.softvol-i2s1 {
    @args [ CARD ]
    type softvol
    slave.pcm "hw:snddaudio1"
    control {
        name "PCM i2s1 volume"
        card $CARD
    }
}

pcm.softvol-i2s2 {
    @args [ CARD ]
    type softvol
    slave.pcm "hw:snddaudio2"
    control {
        name "PCM i2s2 volume"
        card $CARD
    }
}
